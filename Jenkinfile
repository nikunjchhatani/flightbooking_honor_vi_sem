pipeline {
    agent any

    environment {
        JAR_NAME = 'Flightbooking-0.0.1-SNAPSHOT.jar'
        DOCKER_IMAGE_NAME = 'yourdockerhubusername/flightbooking'  // Replace with your Docker Hub repo or desired image name
        DOCKER_IMAGE_TAG = 'latest' // or use build number or git commit hash for tagging
        EC2_USER = 'ec2-user'
        EC2_HOST = '35.175.140.93'
        WORKSPACE_DIR = 'C:/ProgramData/Jenkins/.jenkins/workspace/flightbooking'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/nikunjchhatani/flightbooking_honor_vi_sem'
            }
        }

        stage('Build') {
            steps {
                bat """
                docker run --rm -u 0 ^
                    -v ${WORKSPACE_DIR}:/app ^
                    -w /app/Flightbooking ^
                    maven:3.8.5-openjdk-17 mvn clean package -DskipTests
                """
            }
        }

        stage('Test') {
            steps {
                bat """
                docker run --rm -u 0 ^
                    -v ${WORKSPACE_DIR}:/app ^
                    -w /app/Flightbooking ^
                    maven:3.8.5-openjdk-17 mvn test
                """
            }
        }

        stage('Build Docker Image') {
            steps {
                bat """
                cd ${WORKSPACE_DIR}
                docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} .
                """
            }
        }

        // Optional: Push Docker image to a registry stage here if you want

        stage('Deploy and Run on EC2') {
            steps {
                withCredentials([file(credentialsId: 'flightbooking-key', variable: 'PEM_PATH')]) {
                    bat """
                    for /f "delims=" %%u in ('whoami') do (
                        icacls "%PEM_PATH%" /inheritance:r
                        icacls "%PEM_PATH%" /grant:r "%%u:R"
                    )
                    """

                    // Option 1: SCP the JAR and run it (your current way)
                    // Option 2: Use Docker on EC2 (if docker installed on EC2)
                    // Here's an example to run docker container on EC2 after pushing image

                    // Assuming Docker installed on EC2, and image is pushed to a registry accessible by EC2

                    // Example to ssh and pull + run docker container (update accordingly)
                    bat """
                    ssh -o StrictHostKeyChecking=no -i "%PEM_PATH%" ${EC2_USER}@${EC2_HOST} ^
                        "docker pull ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} && docker stop flightbooking || true && docker rm flightbooking || true && docker run -d --name flightbooking -p 8080:8080 ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                    """
                }
            }
        }
    }
}
